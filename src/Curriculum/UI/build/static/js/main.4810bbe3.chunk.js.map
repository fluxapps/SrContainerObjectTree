{"version":3,"sources":["CurriculumTree.js","App.js","serviceWorker.js","index.js"],"names":["CurriculumTree","props","onSelect","selectedNode","type","onSelectilCategory","onSelectilItem","state","urlTreeService","document","getElementById","textContent","nodeIdToLoad","nodeDepthToLoad","loadedTreeNodeIds","nodesOfTree","alreadyinTree","showLoadingSpinner","loadTreeSection","params","URLSearchParams","append","fetch","this","then","res","json","tree_node","i","length","console","log","id","checkIfLoaded","push","setState","selectedCategoryNode","depth","selectedItemNode","link","window","location","href","className","style","display","flexWrap","flexGrow","nodes","theme","isLoading","indexOf","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4810bbe3.chunk.js","sourcesContent":["import React from 'react'\n\nimport './styles.css'\nimport Tree from '@naisutech/react-tree';\n\nclass CurriculumTree extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n\n    this.state = {\n      urlTreeService: document.getElementById('treeservice').textContent,\n      nodeIdToLoad: document.getElementById('treeservice-nodeid').textContent,\n      nodeDepthToLoad: 1,\n      loadedTreeNodeIds: [],\n      nodesOfTree: [],\n      alreadyinTree: [],\n      showLoadingSpinner: 1,\n    }\n\n    this.loadTreeSection(\n      this.state.nodeIdToLoad,\n      this.state.nodeDepthToLoad,\n      this.state.loadedTreeNodeIds,\n      this.state.nodesOfTree,\n      this.state.alreadyinTree)\n  }\n\n  loadTreeSection(nodeIdToLoad,\n                  nodeDepthToLoad,\n                  loadedTreeNodeIds,\n                  nodesOfTree,\n                  alreadyinTree) {\n\n    const params = new URLSearchParams()\n    params.append('node_id', nodeIdToLoad)\n    params.append('node_depth', nodeDepthToLoad)\n\n    fetch(this.state.urlTreeService + \"&\" + params).then(res => res.json())\n    .then(json => {\n      let tree_node\n      for(let i = 0; i < json.length; i++) {\n          tree_node =json[i];\n          console.log(tree_node.id)\n        if(this.checkIfLoaded(alreadyinTree, tree_node.id) === false) {\n          console.log('LOAD')\n          this.state.nodesOfTree.push(tree_node);\n          this.state.alreadyinTree.push(tree_node.id);\n        }\n      }\n\n      this.setState({\n        loadedTreeNodeIds: [...this.state.loadedTreeNodeIds, nodeIdToLoad],\n        nodesOfTree: this.state.nodesOfTree,\n        alreadyinTree: this.state.alreadyinTree,\n       showLoadingSpinner: ''\n      })\n    })\n  }\n\n\n  onSelect = (selectedNode) => {\n    if(selectedNode.type == 'cat') {\n      this.onSelectilCategory(selectedNode)\n    } else {\n      this.onSelectilItem(selectedNode)\n    }\n  }\n\n  onSelectilCategory(selectedCategoryNode) {\n    const { urlTreeService, nodeIdToLoad, nodeDepthToLoad, loadedTreeNodeIds, nodesOfTree, alreadyinTree,showLoadingSpinner } = this.state;\n    if (this.checkIfLoaded(loadedTreeNodeIds, selectedCategoryNode.id) === false) {\n      this.setState({showLoadingSpinner: 1})\n      this.loadTreeSection(\n        selectedCategoryNode.id, selectedCategoryNode.depth, loadedTreeNodeIds, nodesOfTree, alreadyinTree)\n    }\n  }\n\n  onSelectilItem(selectedItemNode) {\n    const { urlTreeService, nodeIdToLoad, nodeDepthToLoad, loadedTreeNodeIds, nodesOfTree, alreadyinTree,showLoadingSpinner } = this.state;\n    console.log(selectedItemNode.link)\n    this.setState({showLoadingSpinner: 1})\n    window.location.href = selectedItemNode.link\n  }\n\n  render() {\n    const { urlTreeService, nodeIdToLoad, nodeDepthToLoad, loadedTreeNodeIds, nodesOfTree, showLoadingSpinner } = this.state;\n        return (<div className=\"showtree\" style={{ display: 'flex', flexWrap: 'nowrap', flexGrow: 1 }}>\n          <div style={{ display: 'flex', flexWrap: 'nowrap', flexGrow: 1}}>\n            <Tree nodes={nodesOfTree}  theme={'light'} onSelect={this.onSelect} isLoading={showLoadingSpinner} />\n          </div>\n        </div>)\n  }\n\n  checkIfLoaded(loadedTreeNodeIds, nodeIdToLoad) {\n    return loadedTreeNodeIds.indexOf(nodeIdToLoad) >= 0\n  }\n}\n\nexport default CurriculumTree;\nCurriculumTree.propTypes = {}","import React from 'react';\nimport './App.css';\nimport CurriculumTree from './CurriculumTree';\n\nexport default function App() {\n  return (\n    <CurriculumTree>\n\n    </CurriculumTree>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n  .register(swUrl)\n  .then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              'New content is available and will be used when all ' +\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  })\n  .catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n  .then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf('javascript') === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n  .catch(() => {\n    console.log(\n      'No internet connection found. App is running in offline mode.'\n    );\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n    .then(registration => {\n      registration.unregister();\n    })\n    .catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}