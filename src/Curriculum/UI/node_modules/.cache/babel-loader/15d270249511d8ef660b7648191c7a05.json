{"ast":null,"code":"var _jsxFileName = \"/home/mstuder/Develop/ILIAS/medi/ilias/Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/SrCurriculum/src/Curriculum/Infrastructure/UI/tree/src/CurriculumTree.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CurriculumTreeSection from './CurriculumTreeSection';\nimport './styles.css';\nimport Tree from '@naisutech/react-tree';\n\nclass CurriculumTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlerTreeSections = () => {\n      //Calling a function of other class (with argument)\n      new CurriculumTreeSection({\n        urlTreeService: this.state.urlTreeservice,\n        startNodeId: this.state.nodeIdToLoad\n      }).render();\n    };\n\n    this.state = {\n      urlTreeservice: document.getElementById('treeservice').textContent,\n      nodeIdToLoad: 224,\n      loadedTreeNodeIds: [],\n      nodesOfTree: []\n    }; //document.getElementById('treeservice-nodeid').textContent\n  }\n\n  loadTreeSection(urlTreeservice, nodeIdToLoad) {\n    /*   const nodes = ({sections}) => (\n         <Tree nodes=\n                 {sections.map(section => <CurriculumTreeSection urlTreeService={urlTreeservice} startNodeId={nodeIdToLoad} showEmptyItems size=\"half\" theme={'light'} />)}\n               showEmptyItems size=\"half\" theme={'light'}/>\n       );*/\n    handlerTreeSections().then(section => {});\n  }\n\n  render() {\n    const {\n      urlTreeservice,\n      nodeIdToLoad,\n      loadedTreeNodeIds,\n      nodesOfTree\n    } = this.state;\n    ReactDOM.render();\n\n    if (this.checkIfLoaded(loadedTreeNodeIds, nodeIdToLoad) === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"showtree\",\n        style: {\n          display: 'flex',\n          flexWrap: 'nowrap',\n          flexGrow: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '50%',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, nodesOfTree));\n    } else {\n      const {\n        urlTreeservice,\n        nodeIdToLoad,\n        loadedTreeNodeIds,\n        nodesOfTree\n      } = this.state;\n      this.loadTreeSection(nodeIdToLoad); // Add item to it\n\n      const currentLoadedTreeNodeIds = this.state.loadedTreeNodeIds;\n      currentLoadedTreeNodeIds.push({\n        value: nodeIdToLoad\n      });\n      const currentNodesOfTree = this.state.nodesOfTree;\n      currentNodesOfTree.push({\n        value: nodes\n      }); // Set state\n\n      this.setState({\n        currentLoadedTreeNodeIds,\n        currentNodesOfTree\n      }); //  console.log(JSON.stringify(this.state))\n\n      return \"loading\";\n    }\n  }\n\n  checkIfLoaded(loadedTreeNodeIds, NodeId) {\n    return NodeId in loadedTreeNodeIds;\n  }\n\n}\n\nexport default CurriculumTree;\nCurriculumTree.propTypes = {};","map":{"version":3,"sources":["/home/mstuder/Develop/ILIAS/medi/ilias/Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/SrCurriculum/src/Curriculum/Infrastructure/UI/tree/src/CurriculumTree.js"],"names":["React","ReactDOM","CurriculumTreeSection","Tree","CurriculumTree","Component","constructor","props","handlerTreeSections","urlTreeService","state","urlTreeservice","startNodeId","nodeIdToLoad","render","document","getElementById","textContent","loadedTreeNodeIds","nodesOfTree","loadTreeSection","then","section","checkIfLoaded","display","flexWrap","flexGrow","width","flexDirection","currentLoadedTreeNodeIds","push","value","currentNodesOfTree","nodes","setState","NodeId","propTypes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,mBAXmB,GAWG,MAAM;AAC1B;AACA,UAAIN,qBAAJ,CAA0B;AAACO,QAAAA,cAAc,EAAE,KAAKC,KAAL,CAAWC,cAA5B;AAA4CC,QAAAA,WAAW,EAAE,KAAKF,KAAL,CAAWG;AAApE,OAA1B,EAA6GC,MAA7G;AACD,KAdkB;;AAEjB,SAAKJ,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAEI,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,WAD5C;AAEXJ,MAAAA,YAAY,EAAE,GAFH;AAGXK,MAAAA,iBAAiB,EAAE,EAHR;AAIXC,MAAAA,WAAW,EAAE;AAJF,KAAb,CAFiB,CAQjB;AACD;;AAODC,EAAAA,eAAe,CAACT,cAAD,EAAgBE,YAAhB,EAA8B;AAE9C;;;;;AAMGL,IAAAA,mBAAmB,GAAGa,IAAtB,CAA2BC,OAAO,IAAI,CAAE,CAAxC;AAGD;;AAGDR,EAAAA,MAAM,GAAG;AACP,UAAM;AAACH,MAAAA,cAAD;AAAiBE,MAAAA,YAAjB;AAA+BK,MAAAA,iBAA/B;AAAkDC,MAAAA;AAAlD,QAAiE,KAAKT,KAA5E;AAEAT,IAAAA,QAAQ,CAACa,MAAT;;AAEA,QAAI,KAAKS,aAAL,CAAmBL,iBAAnB,EAAsCL,YAAtC,MAAwD,IAA5D,EAAkE;AAChE,0BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,KAAK,EAAE;AAAEW,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,QAAQ,EAAE,QAA7B;AAAuCC,UAAAA,QAAQ,EAAE;AAAjD,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAT;AAAgBH,UAAAA,OAAO,EAAE,MAAzB;AAAiCI,UAAAA,aAAa,EAAE;AAAhD,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACET,WADF,CADF,CADF;AAOD,KARD,MAQO;AACL,YAAM;AAACR,QAAAA,cAAD;AAAiBE,QAAAA,YAAjB;AAA+BK,QAAAA,iBAA/B;AAAkDC,QAAAA;AAAlD,UAAiE,KAAKT,KAA5E;AAEA,WAAKU,eAAL,CAAqBP,YAArB,EAHK,CAKL;;AACA,YAAMgB,wBAAwB,GAAG,KAAKnB,KAAL,CAAWQ,iBAA5C;AACAW,MAAAA,wBAAwB,CAACC,IAAzB,CAA8B;AAAEC,QAAAA,KAAK,EAAElB;AAAT,OAA9B;AAMA,YAAMmB,kBAAkB,GAAG,KAAKtB,KAAL,CAAWS,WAAtC;AACAa,MAAAA,kBAAkB,CAACF,IAAnB,CAAwB;AAAEC,QAAAA,KAAK,EAAEE;AAAT,OAAxB,EAdK,CAeL;;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,wBAAF;AAA4BG,QAAAA;AAA5B,OAAd,EAhBK,CAmBP;;AACE,aAAQ,SAAR;AACD;AACF;;AAEDT,EAAAA,aAAa,CAACL,iBAAD,EAAoBiB,MAApB,EAA4B;AACvC,WAAOA,MAAM,IAAIjB,iBAAjB;AACD;;AAvE0C;;AA2E7C,eAAed,cAAf;AACAA,cAAc,CAACgC,SAAf,GAA2B,EAA3B","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CurriculumTreeSection from './CurriculumTreeSection'\n\nimport './styles.css'\nimport Tree from '@naisutech/react-tree';\n\nclass CurriculumTree extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      urlTreeservice: document.getElementById('treeservice').textContent,\n      nodeIdToLoad: 224,\n      loadedTreeNodeIds: [],\n      nodesOfTree: []\n    }\n    //document.getElementById('treeservice-nodeid').textContent\n  }\n\n  handlerTreeSections = () => {\n    //Calling a function of other class (with argument)\n    new CurriculumTreeSection({urlTreeService: this.state.urlTreeservice, startNodeId: this.state.nodeIdToLoad}).render();\n  };\n\n  loadTreeSection(urlTreeservice,nodeIdToLoad) {\n\n /*   const nodes = ({sections}) => (\n      <Tree nodes=\n              {sections.map(section => <CurriculumTreeSection urlTreeService={urlTreeservice} startNodeId={nodeIdToLoad} showEmptyItems size=\"half\" theme={'light'} />)}\n            showEmptyItems size=\"half\" theme={'light'}/>\n    );*/\n\n    handlerTreeSections().then(section => {})\n\n\n  }\n\n\n  render() {\n    const {urlTreeservice, nodeIdToLoad, loadedTreeNodeIds, nodesOfTree} = this.state;\n\n    ReactDOM.render()\n\n    if (this.checkIfLoaded(loadedTreeNodeIds, nodeIdToLoad) === true) {\n      return (\n        <div className=\"showtree\" style={{ display: 'flex', flexWrap: 'nowrap', flexGrow: 1 }}>\n          <div style={{ width: '50%', display: 'flex', flexDirection: 'column' }}>\n           {nodesOfTree}\n          </div>\n        </div>\n      )\n    } else {\n      const {urlTreeservice, nodeIdToLoad, loadedTreeNodeIds, nodesOfTree} = this.state;\n\n      this.loadTreeSection(nodeIdToLoad)\n\n      // Add item to it\n      const currentLoadedTreeNodeIds = this.state.loadedTreeNodeIds\n      currentLoadedTreeNodeIds.push({ value: nodeIdToLoad });\n\n\n\n\n\n      const currentNodesOfTree = this.state.nodesOfTree\n      currentNodesOfTree.push({ value: nodes });\n      // Set state\n      this.setState({ currentLoadedTreeNodeIds, currentNodesOfTree });\n\n\n    //  console.log(JSON.stringify(this.state))\n      return (\"loading\")\n    }\n  }\n\n  checkIfLoaded(loadedTreeNodeIds, NodeId) {\n    return NodeId in loadedTreeNodeIds\n  }\n\n}\n\nexport default CurriculumTree;\nCurriculumTree.propTypes = {}\n\n\n"]},"metadata":{},"sourceType":"module"}