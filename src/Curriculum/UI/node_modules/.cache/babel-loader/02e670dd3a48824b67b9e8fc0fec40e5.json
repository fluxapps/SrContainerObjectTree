{"ast":null,"code":"var _jsxFileName = \"/home/mstuder/Develop/ILIAS/medi/ilias/Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/SrCurriculum/src/Curriculum/Infrastructure/UI/tree/src/CurriculumTree.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CurriculumTreeSection from './CurriculumTreeSection';\nimport './styles.css';\nimport Tree from '@naisutech/react-tree';\n\nclass CurriculumTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      urlTreeservice: document.getElementById('treeservice').textContent,\n      nodeIdToLoad: 224,\n      loadedTreeNodeIds: [],\n      nodesOfTree: []\n    }; //document.getElementById('treeservice-nodeid').textContent\n  }\n\n  handleTreeSection() {\n    //Calling a function of other class (with argument)\n    return new CurriculumTreeSection({\n      urlTreeService: this.state.urlTreeservice,\n      startNodeId: this.state.nodeIdToLoad\n    }).render();\n  }\n\n  loadTreeSection(urlTreeservice, nodeIdToLoad) {\n    /*   const nodes = ({sections}) => (\n         <Tree nodes=\n                 {sections.map(section => <CurriculumTreeSection urlTreeService={urlTreeservice} startNodeId={nodeIdToLoad} showEmptyItems size=\"half\" theme={'light'} />)}\n               showEmptyItems size=\"half\" theme={'light'}/>\n       );*/\n  }\n\n  render() {\n    const {\n      urlTreeservice,\n      nodeIdToLoad,\n      loadedTreeNodeIds,\n      nodesOfTree\n    } = this.state;\n\n    if (this.checkIfLoaded(loadedTreeNodeIds, nodeIdToLoad) === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"showtree\",\n        style: {\n          display: 'flex',\n          flexWrap: 'nowrap',\n          flexGrow: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '50%',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, nodesOfTree));\n    } else {\n      this.handleTreeSection().then(section => {\n        const currentLoadedTreeNodeIds = this.state.loadedTreeNodeIds;\n        currentLoadedTreeNodeIds.push({\n          value: nodeIdToLoad\n        });\n        const currentNodesOfTree = this.state.nodesOfTree;\n        currentNodesOfTree.push({\n          value: section\n        }); // Set state\n\n        this.setState({\n          currentLoadedTreeNodeIds,\n          currentNodesOfTree\n        }); //  console.log(JSON.stringify(this.state))\n\n        return \"loading\";\n      });\n    }\n  }\n\n  checkIfLoaded(loadedTreeNodeIds, NodeId) {\n    return NodeId in loadedTreeNodeIds;\n  }\n\n}\n\nexport default CurriculumTree;\nCurriculumTree.propTypes = {};","map":{"version":3,"sources":["/home/mstuder/Develop/ILIAS/medi/ilias/Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/SrCurriculum/src/Curriculum/Infrastructure/UI/tree/src/CurriculumTree.js"],"names":["React","ReactDOM","CurriculumTreeSection","Tree","CurriculumTree","Component","constructor","props","state","urlTreeservice","document","getElementById","textContent","nodeIdToLoad","loadedTreeNodeIds","nodesOfTree","handleTreeSection","urlTreeService","startNodeId","render","loadTreeSection","checkIfLoaded","display","flexWrap","flexGrow","width","flexDirection","then","section","currentLoadedTreeNodeIds","push","value","currentNodesOfTree","setState","NodeId","propTypes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAEC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,WAD5C;AAEXC,MAAAA,YAAY,EAAE,GAFH;AAGXC,MAAAA,iBAAiB,EAAE,EAHR;AAIXC,MAAAA,WAAW,EAAE;AAJF,KAAb,CAFiB,CAQjB;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB;AACA,WAAO,IAAId,qBAAJ,CAA0B;AAACe,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWC,cAA5B;AAA4CS,MAAAA,WAAW,EAAE,KAAKV,KAAL,CAAWK;AAApE,KAA1B,EAA6GM,MAA7G,EAAP;AACD;;AAEDC,EAAAA,eAAe,CAACX,cAAD,EAAgBI,YAAhB,EAA8B;AAE9C;;;;;AASE;;AAGDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA,cAAF;AAAkBI,MAAAA,YAAlB;AAAgCC,MAAAA,iBAAhC;AAAmDC,MAAAA;AAAnD,QAAmE,KAAKP,KAA9E;;AAEA,QAAI,KAAKa,aAAL,CAAmBP,iBAAnB,EAAsCD,YAAtC,MAAwD,IAA5D,EAAkE;AAChE,0BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,KAAK,EAAE;AAAES,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,QAAQ,EAAE,QAA7B;AAAuCC,UAAAA,QAAQ,EAAE;AAAjD,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAT;AAAgBH,UAAAA,OAAO,EAAE,MAAzB;AAAiCI,UAAAA,aAAa,EAAE;AAAhD,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGX,WADH,CADF,CADF;AAOD,KARD,MAQO;AACL,WAAKC,iBAAL,GAAyBW,IAAzB,CAA8BC,OAAO,IAAI;AACvC,cAAMC,wBAAwB,GAAG,KAAKrB,KAAL,CAAWM,iBAA5C;AACAe,QAAAA,wBAAwB,CAACC,IAAzB,CAA8B;AAAEC,UAAAA,KAAK,EAAElB;AAAT,SAA9B;AAEA,cAAMmB,kBAAkB,GAAG,KAAKxB,KAAL,CAAWO,WAAtC;AACAiB,QAAAA,kBAAkB,CAACF,IAAnB,CAAwB;AAAEC,UAAAA,KAAK,EAAEH;AAAT,SAAxB,EALuC,CAMvC;;AACA,aAAKK,QAAL,CAAc;AAAEJ,UAAAA,wBAAF;AAA4BG,UAAAA;AAA5B,SAAd,EAPuC,CAQvC;;AACA,eAAQ,SAAR;AACD,OAVD;AAWD;AACF;;AAEDX,EAAAA,aAAa,CAACP,iBAAD,EAAoBoB,MAApB,EAA4B;AACvC,WAAOA,MAAM,IAAIpB,iBAAjB;AACD;;AA5D0C;;AAgE7C,eAAeV,cAAf;AACAA,cAAc,CAAC+B,SAAf,GAA2B,EAA3B","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CurriculumTreeSection from './CurriculumTreeSection'\n\nimport './styles.css'\nimport Tree from '@naisutech/react-tree';\n\nclass CurriculumTree extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      urlTreeservice: document.getElementById('treeservice').textContent,\n      nodeIdToLoad: 224,\n      loadedTreeNodeIds: [],\n      nodesOfTree: []\n    }\n    //document.getElementById('treeservice-nodeid').textContent\n  }\n\n  handleTreeSection(){\n    //Calling a function of other class (with argument)\n    return new CurriculumTreeSection({urlTreeService: this.state.urlTreeservice, startNodeId: this.state.nodeIdToLoad}).render();\n  }\n\n  loadTreeSection(urlTreeservice,nodeIdToLoad) {\n\n /*   const nodes = ({sections}) => (\n      <Tree nodes=\n              {sections.map(section => <CurriculumTreeSection urlTreeService={urlTreeservice} startNodeId={nodeIdToLoad} showEmptyItems size=\"half\" theme={'light'} />)}\n            showEmptyItems size=\"half\" theme={'light'}/>\n    );*/\n\n\n\n\n  }\n\n\n  render() {\n    const { urlTreeservice, nodeIdToLoad, loadedTreeNodeIds, nodesOfTree } = this.state;\n\n    if (this.checkIfLoaded(loadedTreeNodeIds, nodeIdToLoad) === true) {\n      return (\n        <div className=\"showtree\" style={{ display: 'flex', flexWrap: 'nowrap', flexGrow: 1 }}>\n          <div style={{ width: '50%', display: 'flex', flexDirection: 'column' }}>\n            {nodesOfTree}\n          </div>\n        </div>\n      )\n    } else {\n      this.handleTreeSection().then(section => {\n        const currentLoadedTreeNodeIds = this.state.loadedTreeNodeIds\n        currentLoadedTreeNodeIds.push({ value: nodeIdToLoad });\n\n        const currentNodesOfTree = this.state.nodesOfTree\n        currentNodesOfTree.push({ value: section });\n        // Set state\n        this.setState({ currentLoadedTreeNodeIds, currentNodesOfTree });\n        //  console.log(JSON.stringify(this.state))\n        return (\"loading\")\n      });\n    }\n  }\n\n  checkIfLoaded(loadedTreeNodeIds, NodeId) {\n    return NodeId in loadedTreeNodeIds\n  }\n\n}\n\nexport default CurriculumTree;\nCurriculumTree.propTypes = {}\n\n\n"]},"metadata":{},"sourceType":"module"}